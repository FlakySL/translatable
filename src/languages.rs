use strum::EnumIter;
use strum::EnumString;
use strum::IntoEnumIterator;

#[derive(Debug, EnumIter)]
pub enum Iso639a {
    AB,
    AA,
    AF,
    SQ,
    AM,
    AR,
    HY,
    AS,
    AY,
    AZ,
    BA,
    EU,
    BN,
    DZ,
    BH,
    BI,
    BR,
    BG,
    MY,
    BE,
    KM,
    CA,
    ZH,
    CO,
    HR,
    CS,
    DA,
    NL,
    EN,
    EO,
    ET,
    FO,
    FJ,
    FI,
    FR,
    FY,
    GL,
    KA,
    DE,
    EL,
    KL,
    GN,
    GU,
    HA,
    HE,
    HI,
    HU,
    IS,
    ID,
    IA,
    IE,
    IU,
    IK,
    GA,
    IT,
    JA,
    JV,
    KN,
    KS,
    KK,
    RW,
    KY,
    RN,
    KO,
    KU,
    LO,
    LA,
    LV,
    LN,
    LT,
    MK,
    MG,
    MS,
    ML,
    MT,
    MI,
    MR,
    MO,
    MN,
    NA,
    NE,
    NO,
    OC,
    OR,
    PS,
    PL,
    PT,
    PA,
    QU,
    RM,
    RO,
    RU,
    SM,
    SG,
    SA,
    SR,
    SH,
    ST,
    TN,
    SN,
    SD,
    SI,
    SS,
    SK,
    SL,
    SO,
    ES,
    SU,
    SW,
    SV,
    TL,
    TG,
    TA,
    TT,
    TE,
    TH,
    BO,
    TI,
    TO,
    TS,
    TR,
    TK,
    TW,
    UG,
    UK,
    UR,
    UZ,
    VI,
    VO,
    CY,
    WO,
    XH,
    YI,
    YO,
    ZA,
    ZU
}

impl Iso639a {
    pub fn is_valid(lang: &str) -> bool {
        Self::languages()
            .iter()
            .any(|valid_lang| valid_lang == lang)
    }

    pub fn languages() -> Vec<String> {
        Self::iter()
            .map(|lang| format!("{:?}", lang).to_lowercase())
            .collect()
    }
}
